;; TODO I'm starting to want an emacs function to auto-generate this file.
((clojure-mode . ((eval . (progn
                            (define-clojure-indent
                              (macrolet '(1 ((:defn)) nil))
                              (clojure.tools.macro/macrolet '(1 ((:defn)) nil))
                              (bllm.util/compat-old 1)
                              (bllm.util/compat-std 1)
                              (bllm.util/doarray    1)
                              (bllm.util/docoll     1)
                              (bllm.util/domap      1)
                              (bllm.util/doiter     1)
                              (bllm.util/dorange    1)
                              (bllm.util/dorange<   1)
                              (bllm.util/dolist     1))
                            (put 'bllm.cli/defgroup          'clojure-doc-string-elt 2)
                            (put 'bllm.cli/defvar            'clojure-doc-string-elt 2)
                            (put 'bllm.cli/defcmd            'clojure-doc-string-elt 2)
                            (put 'bllm.data/defimport        'clojure-doc-string-elt 2)
                            (put 'bllm.data/defstore         'clojure-doc-string-elt 2)
                            (put 'bllm.ecs/defc              'clojure-doc-string-elt 2)
                            (put 'bllm.ecs/defsys            'clojure-doc-string-elt 2)
                            (put 'bllm.gpu/defres            'clojure-doc-string-elt 2)
                            (put 'bllm.meta/defenum          'clojure-doc-string-elt 2)
                            (put 'bllm.meta/defflag          'clojure-doc-string-elt 2)
                            (put 'bllm.meta/defbits          'clojure-doc-string-elt 2)
                            (put 'defm                       'clojure-doc-string-elt 2)
                            (put 'def1                       'clojure-doc-string-elt 2)
                            (put 'bllm.util/defm             'clojure-doc-string-elt 2)
                            (put 'bllm.util/defalias         'clojure-doc-string-elt 2)
                            (put 'bllm.util/defconst         'clojure-doc-string-elt 2)
                            (put 'bllm.util/def1             'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defprimitive     'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defstencil-face  'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defdepth-stencil 'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defmultisample   'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defblend-comp    'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defblend         'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defbuiltin       'clojure-doc-string-elt 4)
                            (put 'bllm.wgsl/defvertex-attr   'clojure-doc-string-elt 4)
                            (put 'bllm.wgsl/defdraw-buffer   'clojure-doc-string-elt 4)
                            (put 'bllm.wgsl/definterpolant   'clojure-doc-string-elt 4)
                            (put 'bllm.wgsl/defstruct        'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defbuffer        'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/deftexture       'clojure-doc-string-elt 6)
                            (put 'bllm.wgsl/defstorage       'clojure-doc-string-elt 6)
                            (put 'bllm.wgsl/defsampler       'clojure-doc-string-elt 4)
                            (put 'bllm.wgsl/defgroup         'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/deflayout        'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defenum          'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defflag          'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defconst         'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defvar           'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defun            'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defkernel        'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defvertex        'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defpixel         'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defcompute       'clojure-doc-string-elt 2)
                            (put 'bllm.wgsl/defrender        'clojure-doc-string-elt 2)
                            (put 'repl.ui/defevent           'clojure-doc-string-elt 2)
                            (put 'repl.ui/defeffect          'clojure-doc-string-elt 2)
                            (put 'repl.ui/defhandler         'clojure-doc-string-elt 2)
                            (put 'repl.ui/defschema          'clojure-doc-string-elt 2)
                            (put 'repl.ui/deframe            'clojure-doc-string-elt 2)
                            (put 'repl.ui/defview            'clojure-doc-string-elt 2)
                            (put 'repl.ui/defpane            'clojure-doc-string-elt 2)
                            )))))
