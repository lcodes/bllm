;; TODO I'm starting to want an emacs function to auto-generate this file.
((clojure-mode . ((eval . (progn
                            (define-clojure-indent
                              (macrolet '(1 ((:defn)) nil))
                              (clojure.tools.macro/macrolet '(1 ((:defn)) nil))
                              (bllm.util/compat-old   1)
                              (bllm.util/compat-std   1)
                              (bllm.util/doarray      1)
                              (bllm.util/docoll       1)
                              (bllm.util/doiter       1)
                              (bllm.util/dorange      1)
                              (bllm.util/do-node-list 1))
                            (put 'defm                   'clojure-doc-string-elt 2)
                            (put 'defconst               'clojure-doc-string-elt 2)
                            (put 'def1                   'clojure-doc-string-elt 2)
                            (put 'defenum                'clojure-doc-string-elt 2)
                            (put 'defflag                'clojure-doc-string-elt 2)
                            (put 'defgpu                 'clojure-doc-string-elt 2)
                            (put 'defstage               'clojure-doc-string-elt 2)
                            (put 'defnode                'clojure-doc-string-elt 2)
                            (put 'defio                  'clojure-doc-string-elt 2)
                            (put 'defstate               'clojure-doc-string-elt 2)
                            (put 'wgsl/def-vertex-attr   'clojure-doc-string-elt 4)
                            (put 'wgsl/def-interpolant   'clojure-doc-string-elt 4)
                            (put 'wgsl/def-draw-target   'clojure-doc-string-elt 4)
                            (put 'wgsl/defuniform        'clojure-doc-string-elt 2)
                            (put 'wgsl/defstorage        'clojure-doc-string-elt 6)
                            (put 'wgsl/deftexture        'clojure-doc-string-elt 2)
                            (put 'wgsl/defsampler        'clojure-doc-string-elt 2)
                            (put 'wgsl/defgroup          'clojure-doc-string-elt 2)
                            (put 'wgsl/deflayout         'clojure-doc-string-elt 2)
                            (put 'wgsl/defvertex         'clojure-doc-string-elt 2)
                            (put 'wgsl/defpixel          'clojure-doc-string-elt 2)
                            (put 'wgsl/defkernel         'clojure-doc-string-elt 2)
                            (put 'wgsl/def-primitive     'clojure-doc-string-elt 2)
                            (put 'wgsl/def-depth-stencil 'clojure-doc-string-elt 2)
                            (put 'wgsl/def-multisample   'clojure-doc-string-elt 2)
                            (put 'wgsl/defrender         'clojure-doc-string-elt 2)
                            (put 'wgsl/defcompute        'clojure-doc-string-elt 2)
                            )))))
